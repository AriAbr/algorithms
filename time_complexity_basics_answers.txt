# Exercises

1. What is time complexity and what is its relation to algorithms?

Time complexity is a way of measuring how long an algorithm will take to finish
executing relative to the size of the inputted data.

2. What is runtime?

Runtime can either refer to the actual amount of time that it takes for an
algorithm to execute or can be another way of referring to time complexity.

3. How is the runtime of an algorithm calculated?

First the number of instructions to be executed per datum is calculated.
Once that formula is determined, it is simplified to the number with the
highest power and everything else is dropped. What is left is the runtime.

4. Name the six types of algorithm growth rates we saw in this checkpoint and
list them in order of most efficient to least efficient. Now Google another
algorithmic growth rate not covered and place it in the correct spot in your
list.

1- Constant
2- Logarithmic
3- Linear
4- Log-Linear
5- Quadratic
6- Exponential

Another growth rate is factorial, or O(n!). This would be even less efficient
than exponential growth rate.

5. Choose one of the algorithmic growth rates from the last question and make a
comparison to a real-life situation.

If I wanted to test a number of batteries to see which are dead and which are
not, the algorithm would have a linear growth rate. The amount of time required
would increase proportionately to the number of batteries being tested.

6. Determine the time complexity of the following snippet of code. It is
commonly known as a linear search.
FUNCTION linearSearch(array, target)
  FOR each number in the array
    IF number = target THEN
      RETURN true
    END IF
  END FOR
  RETURN false
END FUNCTION


The function has a time complexity of O(n).

7. Determine the time complexity of the following snippet of code.
FUNCTION foo(array)
  FOR each number in the array
    FOR each number in the array
      print "Hello"
    END FOR
  END FOR
END FUNCTION

The function has a time complexity of O(n^2).

8. Determine the time complexity of the following snippet of code. It is
commonly known as the Fibonacci sequence.
FUNCTION fibonacci(number)
  IF number < 1 THEN
    ERROR
  ELSE IF number = 1 or 2 THEN
    RETURN 1
  ELSE
    CALL fibonacci WITH number - 2 RETURNING twoBack
    CALL fibonacci WITH number - 1 RETURNING oneBack
    RETURN twoBack + oneBack
  END IF
END FUNCTION

The function has a time complexity of O(2^n).

9. Out of the code snippets you just saw, which is the most time efficient?

The first snippet (question 6) is the most time efficient.
